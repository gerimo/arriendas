<?php

/**
 * TransactionTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class TransactionTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object TransactionTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('Transaction');
    }
    public function findByUser($user_id,$limit = 5){
      $q = Doctrine_Query::create()
        ->from("Transaction t ")
        ->where("t.user_id = ? ",$user_id)
        ->orderBy("t.completed")
        ->limit($limit);
      return  $q->execute();
    }
    public function countIncompleteByUser($user_id){
      $q = Doctrine_Query::create()
        ->from("Transaction t ")
        ->where("t.user_id = ? ",$user_id)
        ->andWhere("t.completed = 0");
      return  $q->count();
    }
	
	public function getTransaction($trans_id = '') {
		
		if(!empty($trans_id)) {
			
			try {
				
				$q = Doctrine_Query::create()
				->from("Transaction t ")
				->innerJoin('t.Reserve r')
				->where("t.id = ? ",$trans_id);
				
				return  $q->fetchOne();
			}
			catch(Exception $e) { return $e; }
		}
		else return FALSE;
	}

	public function getTransactionByReserve($reserve_id = '') {
		
		if(!empty($reserve_id)) {
			
			try {
				
				$q = Doctrine_Query::create()
				->from("Transaction t ")
				->where("t.reserve_id = ? ",$reserve_id)
				->andWhere("t.completed = 0");
				
				return  $q->fetchOne();
			}
			catch(Exception $e) { return $e; }
		}
		else return FALSE;
	}
	
	public function saveTransaction($reserve_id = '') {
		
		if(!empty($reserve_id)) {
			
			try {
				
				$reserve = Doctrine_Core::getTable('Reserve')->find($reserve_id);
				
				if($reserve) {
					
					$transaction = new Transaction();
					$carString = $reserve->getCar()->getModel()->getName() . " " . $reserve->getCar()->getModel()->getBrand()->getName();
					$price_hour = $reserve->getCar()->getPricePerHour();
					$price_day = $reserve->getCar()->getPricePerDay();
					$price_week = $reserve->getCar()->getPricePerWeek();
					$price_month = $reserve->getCar()->getPricePerMonth();
					$transaction->setCar($carString);
					$transaction->setPrice($this->calcularMontoTotal($reserve->getDuration(), $price_hour, $price_day, $price_week, $price_month));
					$transaction->setUser($reserve->getUser());
					$transaction->setDate(date("Y-m-d H:i:s"));
					$transactionType = Doctrine_Core::getTable('TransactionType')->find(1);
					$transaction->setTransactionType($transactionType);
					$transaction->setReserve($reserve);
					$transaction->setCompleted(false);
					$transaction->save();
	
					return TRUE;
				} else return FALSE;
			}
			catch(Exception $e) { return $e; }
		}
		else return FALSE;
	}

	public function successTransaction($trans_id, $codpagocompra, $status, $metodo_id) {
		
		try {
		    
		//Modificamos el metodo, de forma de agregar el correlativo del ultimo pago
		
			
			
	        $q = Doctrine_Query::create()
	                ->update('Transaction t')
	                ->set('t.metodo_id', '?', $metodo_id)
	                ->set('t.codpagocompra', '?', $codpagocompra)
			->set('t.completed', '?', $status)
			->set('t.correlativo_pago','SELECT (MAX(correlativo_pago)+1) FROM Transaction')
	                ->where('t.id = ?', $trans_id);
	        $q->execute();
			
			return TRUE;
		}
		catch(Exception $e) { return $e; }
	}
	
    private function calcularMontoTotal($duration = 0, $preciohora = 0, $preciodia = 0, $preciosemana = 0, $preciomes = 0) {    	
		
        $dias = floor($duration / 24);
        $horas = ($duration / 24) - $dias;

        if ($horas >= 0.25) {
        	
            $dias = $dias + 1;
            $horas = 0;
        } else {       
			$horas = round($horas * 24,0);
		}
        
		if ($dias >=7 || $preciosemana>0){
			$preciodia=$preciosemana/7;
		}

		if ($dias >=30 || $preciomes>0){
			$preciodia=$preciomes/30;
		}

	
        $montototal = floor($preciodia * $dias + $preciohora * $horas);
        
        return $montototal;
    }
}
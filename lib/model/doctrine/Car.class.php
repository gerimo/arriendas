<?php

/**
 * Car
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    CarSharing
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Car extends BaseCar
{
 
  //TODO
  public function ingresarCalificacion($idUsuario, $recomienda, $comentarioRecomienda, $desperfecto, $comentarioDesperfecto,
				       $limpieza, $comentarioGeneral) {
    
  }
  
  public function autoVerificado() {
    if($this->getSeguroOK()==4 OR $this->getSeguroOk()==3) {
      return true;
    } else {
      return false;
    }
  }
  public function getCantidadCalificacionesPositivas(){
      $q = Doctrine_Query::create()->from('Rating')
      ->where('Rating.Reserve.Car.Id = ?', $this->getId())
      ->andWhere('Rating.Op_recom_car = ?', 1);
      $ratings = $q->execute();
      return $ratings->count();
  }
  public function getTypeTransmission(){

  }
  
  public function getVerificacionOK() {
    if($this->getSeguroFotoFrente()==NULL ||
       $this->getSeguroFotoCostadoDerecho() == NULL ||
       $this->getSeguroFotoCostadoIzquierdo() == NULL ||
       $this->getSeguroFotoTraseroDerecho() == NULL ||
       $this->getLlantaDelDer() == NULL ||
       $this->getLlantaDelIzq() == NULL ||
       $this->getLlantaTraDer() == NULL ||
       $this->getLlantaTraIzq() == NULL ||
       $this->getTablero() == NULL ||
       $this->getRuedaRepuesto() ==  NULL ||
       $this->getPadron() == NULL ||
       $this->getFotoPadronReverso() == NULL) {
      return false;
    } else {
      return true;
    }
  }
  
  public function getMarcaModelo() {
    $modelo= Doctrine_Core::getTable("model")->findOneById($this->getModelId());
    $marca= Doctrine_Core::getTable("brand")->findOneById($modelo->getBrandId());
    return $marca->getName()." ".$modelo->getName();
  }
  

  public function getFoto() {
      sfContext::getInstance()->getConfiguration()->loadHelpers(array('Url'));
      $photo = $this->getFotoPerfil();
      if(is_null($photo)) {
//	$idModelo= $this->getModelId();
//	$query = "SELECT foto_defecto from Model WHERE id='".$idModelo."'";
//	$rs = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAssoc($query);
//	$photo= "".$rs[0]['foto_defecto'];
	$photo= "../../images/img_asegura_tu_auto/seguroFotoCostadoDerecho.png"
;	return $photo;
      } else {
	return $photo;
      }
  }

  
  
  public function getPhotoFile($type)
  {

      $q = Doctrine_Query::create()->from('Photo')
      ->where('Photo.Type = ?', $type)
      ->andWhere('Photo.Car.Id = ?', $this->getId());
      $photo = $q->fetchOne();
    
      if(!$photo) {
	//En este caso, no hay foto del auto. Cargamos la foto por defecto del modelo
	$q = Doctrine_Manager::getInstance()->getCurrentConnection()->getDbh();
        $query= "SELECT Model.foto_defecto FROM Model, Car WHERE Car.id='".$this->getId()."' AND Model.id=Car.model_id";
	$stmt= $q->prepare($query);
	$stmt->execute();
	$result= $stmt->fetchAll();
        $temp= new Photo();
	$temp->setPath("default_".$result[0]['foto_defecto']);
	return $temp;
      }
      
      return $photo;
    

  }
  
 public function getPositiveRatings()
  {

     $q = Doctrine_Query::create()->from('Rating')
      ->where('Rating.Reserve.Car.Id = ?', $this->getId())
	  ->andWhere('Rating.Qualified = ?', 1);
      $ratings = $q->execute();
	 

      return $ratings->count();

  }
  
 public function hasReserve($startDate, $startDate, $endDate, $endDate)
  {

	$rangeDates = array($startDate, $endDate,$startDate, $endDate,$startDate, $endDate);
					$q = Doctrine_Query::create()
					  ->from('reserve r')
//					  ->leftJoin('transaction t ON r.id = t.reserve_id')
					  ->leftJoin('r.Transaction t')
					  ->where('t.completed = ?', true)
					  ->andwhere('r.car_id = ?', $this->getId())
					  ->andwhere('? BETWEEN r.date AND DATE_ADD(r.date, INTERVAL r.duration HOUR) OR ? BETWEEN r.date AND DATE_ADD(r.date, INTERVAL r.duration HOUR) OR r.date BETWEEN ? AND ? OR DATE_ADD(r.date, INTERVAL r.duration HOUR) BETWEEN ? AND ?', $rangeDates);
	
						$checkAvailability = $q->fetchArray();
	
						if( !$checkAvailability ) {
							return false;
						 }else{
							return true;
							};

//   $has_reserve = Doctrine_Core::getTable('Reserve')
//	->createQuery('a')
//	->where('((a.date <= ? and date_add(a.date, INTERVAL a.duration HOUR) > ?) or (a.date <= ? and date_add(a.date, INTERVAL a.duration HOUR) > ?) or (a.date > ? and date_add(a.date, INTERVAL a.duration HOUR) < ?)) and (a.Car.id = ?)', array($startDate, $startDate, $endDate, $endDate, $startDate, $endDate, $this->getId()))
//	->fetchArray();
	
	//print_r(count($has_reserve));
  
//	 if (count($has_reserve) == 0)
//		return false;
//	 else
//		return true;
	 

  }

  public function getNombreComuna() {
        $q = Doctrine_Query::create()->from('Comunas')
                ->where('Comunas.codigoInterno = ?', $this->getComunaId());

        $comuna = $q->fetchOne();

      if(!is_object($comuna)) {
          return '';
      } else {
       return ucwords(strtolower($comuna->getNombre()));
      }
    }

    public function getAddressAprox(){
      $exp_frase=explode(" ",$this->getAddress());
      $num=count($exp_frase);

      for ($i=0,$k=0;$i<$num;$i++){
        if (is_numeric(trim($exp_frase[$i]))){
          $numeros[$k] = $exp_frase[$i];
          $k++;
        }
      }
      for($i=0;$i<count($numeros);$i++){
        $cant_dig = strlen($numeros[$i]);
        if($cant_dig>2){
          $numAux = substr($numeros[$i], 0, -2);
          $numAprox[$i] = $numAux."XX";
        }
      }
      $direccionAprox = "";
      for ($i=0;$i<$num;$i++){
        for($j=0;$j<count($numeros);$j++){
          if(trim($exp_frase[$i])==$numeros[$j]){
            if(isset($numAprox)) $exp_frase[$i] = $numAprox[$j];
            else $exp_frase[$i] = "";
          }
        }
        if($i==0) $direccionAprox = $exp_frase[$i];
        else $direccionAprox = $direccionAprox." ".$exp_frase[$i];
      }	
      return $direccionAprox;
    }


    public function getCarPercentile(){
        $carId = $this->getId();
        $query = "
		
		SELECT 
    c.id, c.score, ((100-ROUND(((@rank - rank) / @rank) * 100, 2))/100)*5 AS percentile_rank
FROM
    (SELECT 
    *,
        @prev:=@curr,
        @curr:=a.score,
        @rank:=IF(@prev = @curr, @rank, @rank + 1) AS rank
    FROM
        (SELECT id, greatest(1,velocidad_contesta_pedidos)/greatest(0.1,contesta_pedidos) as score FROM Car
        where activo=1 and (seguro_ok=3 or seguro_ok=4)) AS a,
        (SELECT @curr:= null, @prev:= null, @rank:= 0) AS b
ORDER BY score DESC) AS c
where c.id=

		".$carId;
		
		$rs = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAssoc($query);
      


		return $rs[0]['percentile_rank'];
    }


	
	
	
		public function save(Doctrine_Connection $conn = null)	{
		
		
				
				
 	  if (!$this->getId() || $this->getCustomerio()<=0)
	  {

			$brand = $this->getMarcaModelo();
			$patente = $this->getPatente();
			$comuna = $this->getNombreComuna();
			
	  $session = curl_init();

$customer_id = 'a_'.$this->getUserId(); // You'll want to set this dynamically to the unique id of the user
$customerio_url = 'https://track.customer.io/api/v1/customers/'.$customer_id.'/events';
$site_id = '3a9fdc2493ced32f26ee';
$api_key = '4f191ca12da03c6edca4';

sfContext::getInstance()->getLogger()->err($customerio_url);

$data = array("name" => "subir_auto", "data[brand]" => $brand, "data[patente]" => $patente, "data[comuna]" => $comuna);

curl_setopt($session, CURLOPT_URL, $customerio_url);
curl_setopt($session, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);
curl_setopt($session, CURLOPT_HEADER, false);
curl_setopt($session, CURLOPT_RETURNTRANSFER, true);
curl_setopt($session, CURLOPT_VERBOSE, 1);
curl_setopt($session, CURLOPT_CUSTOMREQUEST, 'POST');
curl_setopt($session, CURLOPT_POSTFIELDS,http_build_query($data));

curl_setopt($session,CURLOPT_USERPWD,$site_id . ":" . $api_key);

//if(ereg("^(https)",$request)) 
curl_setopt($session,CURLOPT_SSL_VERIFYPEER,false);

curl_exec($session);
curl_close($session);

	$this->setCustomerio(true);
		
	  }

  $ret = parent::save($conn);

  
			$car = Doctrine_Core::getTable('car')->findOneById($this->getId());	
			$user = Doctrine_Core::getTable('user')->findOneById($car->getUserId());	
			$ownerUserId=$user->getId();
			
				$percTotalContestadas=$user->getPercReservasContestadas();
				$velocidadContestaPedidos = $user->getVelocidadRespuesta('0');
				$CantReservasAprobadas= $user->getCantReservasAprobadasTotalOwner();
				$q = Doctrine_Manager::getInstance()->getCurrentConnection();
				$query = "update Car set Cant_Reservas_Aprobadas='$CantReservasAprobadas', contesta_pedidos='$percTotalContestadas', velocidad_contesta_pedidos='$velocidadContestaPedidos' where user_id='$ownerUserId'";
//				$query = "update Car set Cant_Reservas_Aprobadas= $CantReservasAprobadas where user_id='$ownerUserId'";
				$result = $q->execute($query);
				
				
  return $ret;

  }
	
	
}
